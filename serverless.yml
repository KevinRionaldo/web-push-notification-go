service: web-push-notification-go

# Framework version constraint (semver constraint): '3', '^2.33'
frameworkVersion: '3'

params: ${file(./params.yml)}

provider: 
  name: aws
  deploymentMethod: direct
  region: ${param:region}
  profile: ${param:profile}
  runtime: provided.al2023
  architecture: arm64
  # stackName: ${self:service}-stack
  # Default memory size for functions (default: 1024MB)
  memorySize: 246
  # Default timeout for functions (default: 6 seconds)
  # Note: API Gateway has a maximum timeout of 30 seconds
  timeout: 30
  environment:
    STAGE: ${opt:stage, self:provider.stage}
    DB_USER: ${param:db-username}
    DB_NAME: ${param:db-name}
    DB_PASS: ${param:db-password}
    DB_SCHEMA: ${param:db-schema}
    DB_HOST: ${param:db-go-host}
    PUSH_NOTIF_PUBLIC_KEY: ${param:push-notif-public-key}
    PUSH_NOTIF_PRIVATE_KEY: ${param:push-notif-private-key}
    DATABASE_URL: 
      Fn::Join: 
        - ''
        - - "postgresql://"
          - ${param:db-username}
          - ":"
          - ${param:db-password}
          - ${param:db-host}
          - ${param:db-name}
          - "?sslmode=verify-full"
  httpApi:
    cors: true
    authorizers:
      someJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${opt:region, self:provider.region}.amazonaws.com/${param:UserPoolId}
        audience: 
          - '${param:UserPoolClient}'

# package:
#   patterns:
#     - '!./**'
#     - ./bin/**

custom:
  go:
    supportedRuntimes: ['provided.al2023']
    buildProvidedRuntimeAsBootstrap: true
    # baseDir: '.'
    # binDir: '.bin'
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc -ldflags="-s -w"
    # cmd: 'go build -tags lambda.norpc -ldflags="-s -w"' 
    # monorepo: false
    # concurrency: 5
    # env:
    #   GOOS: 'linux'
    #   GOARCH: 'arm64'
    #   CGO_ENABLED: true
  customDomain:
    http:
      domainName: ${param:custom-domain-name}
      stage: $default
      basePath: ${opt:stage, self:provider.stage}/pushNotification
      certificateName: ${param:certificate-name}
      createRoute53Record: true
      createRoute53IPv6Record: true
      endpointType: 'regional'
      securityPolicy: tls_1_2
      autoDomain: true
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 3
    maxConcurrentRequests: 10


functions:
  send-notification:
    handler: src/send-notification/main.go
    events:
      - httpApi:
          method: POST
          path: /sendNotification
          cors: true
          # authorizer:
          #     name: someJwtAuthorizer
  create-subscribtion:
    handler: src/create-subscribtion/main.go
    events:
      - httpApi:
          method: POST
          path: /subscribtion
          cors: true
          authorizer:
              name: someJwtAuthorizer
  delete-subscribtion:
    handler: src/delete-subscribtion/main.go
    events:
      - httpApi:
          method: DELETE
          path: /subscribtion/{id}
          cors: true
          authorizer:
              name: someJwtAuthorizer    
              
plugins:
  - serverless-go-plugin
  - serverless-domain-manager
  